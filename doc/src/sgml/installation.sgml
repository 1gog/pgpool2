<!-- doc/src/sgml/installation.sgml -->

<chapter id="installation">
 <title><productname>pgpool-II</productname>Installation from Source Code</title>

 <indexterm zone="installation">
  <primary>installation</primary>
 </indexterm>

 <para>
   This chapter describes the installtion
   of <productname>pgpool-II</productname>.  First, installation from
   source code distribution is explained. Then installtion from RPM
   packages is explained.
 </para>

 <sect1 id="install-source">
  <title>Installing from the soruce code</title>
  <para>
    pgpool-II's source code and RPM packages for Red Hat Enterprise
    Linux and CentOS can be downloaded from:
    <ulink url="http://pgpool.net/mediawiki/index.php/Downloads">pgpool development page</ulink>
  </para>

  <para>
    Installing <productname>pgpool-II</productname> from source code
    requires gcc 2.9 or higher, and GNU make. Also, pgpool-II links
    with the libpq library, so the libpq library and its development
    headers must be installed on the machine used to build pgpool-II.
    Additionally the OpenSSL library and its development headers must
    be present in order to enable OpenSSL support in pgpool-II.  Also
    the libmemcached library and its development headers must be
    present in order to enable memcached support
    in <productname>pgpool-II</productname>.
  </para>

  <sect2 id="install-pgpool">
    <title>Installing pgpool-II</title>
    <para>
      After extracting the source tarball, execute the configure script.
<programlisting>
./configure
</programlisting>
    </para>

    <para>
    If you want non-default values, some options can be set.
    </para>

    <variablelist>

      <varlistentry>
	<term><option>--prefix=path</option></term>
	<listitem>
          <para>
	    pgpool-II binaries and docs will be installed in this
            directory. Default value is <filename>/usr/local</filename>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>--with-pgsql=path</option></term>
	<listitem>
          <para>
	    The top directory where PostgreSQL's client libraries are
            installed. Default value is provided by <command>pg_config</command>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>--with-openssl</option></term>
       <indexterm>
        <primary>OpenSSL</primary>
       </indexterm>
	<listitem>
          <para>
	   <productname>pgpool-II</productname> binaries will be built
           with <productname>OpenSSL</productname>
           support.  <productname>OpenSSL</productname> support is
           disabled by default.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>--enable-sequence-lock</option></term>
	<listitem>
          <para>
	    Use insert_lock compatible
            with <productname>pgpool-II</productname> 3.0 series
            (until 3.0.4).  <productname>pgpool-II</productname> locks
            against a row in the sequence
            table. <productname>PostgreSQL</productname> 8.2 or later
            which was released after June 2011 cannot use this lock
            method.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>--enable-table-lock</option></term>
	<listitem>
          <para>
	    Use insert_lock compatible
            with <productname>pgpool-II</productname> 2.2 and 2.3
            series.  <productname>pgpool-II</productname> locks
            against the insert target table.  This lock method is
            deprecated because it causes a lock conflict
            with <command>VACUUM</command>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>--with-memcached=path</option></term>
	<listitem>
          <para>
	    <productname>pgpool-II</productname> binaries will use memcached for in
          memory query cache.  You have to
          install <ulink url="http://libmemcached.org/libMemcached.html">libmemcached</ulink>.
	  </para>
	</listitem>
      </varlistentry>

    </variablelist>

    <para>
      <programlisting>
make
make install
      </programlisting>
      will install pgpool-II. (If you use Solaris or FreeBSD, replace make with gmake)
    </para>

  </sect2>

  <sect2 id="install-pgpool-recovery">
    <title>Installing pgpool_recovery</title>
    <para>
      This is required all <productname>pgpool-II</productname>
      installation.
      <programlisting>
$ cd pgpool-II-x.x.x/sql/pgpool-recovery
$ make
$ make install
      </programlisting>
After this:
      <programlisting>
$ psql template1
=# CREATE EXTENSION pgpool_recovery;
      </programlisting>

      or
      <programlisting>
$ psql -f pgpool-recovery.sql template1
      </programlisting>

    </para>

    <para>
      With <productname>pgpool-II</productname> 3.3 or later, you need
      to tweak <filename>postgresql.conf</filename>.  Suppose the path
      to <command>pg_ctl</command>
      is <filename>/usr/local/pgsql/bin/pg_ctl</filename>. Then you
      add following to <filename>postgresql.conf</filename>.

      <programlisting>
pgpool.pg_ctl = '/usr/local/pgsql/bin/pg_ctl'
      </programlisting>

      Probably you want to execute following after this:
      <programlisting>
$ pg_ctl reload -D /usr/local/pgsql/data
      </programlisting>

    </para>
  </sect2>

  <sect2 id="install-pgpool-regclass">
    <title>Installing pgpool-regclass</title>
    <para>
      If you are using <productname>PostgreSQL</productname> 9.4 or
      later, you can skip this section.
    </para>

    <para>
      If you are using <productname>PostgreSQL</productname> 8.0
      to <productname>PostgreSQL</productname> 9.3, installing
      <function>pgpool_regclass</function> function on
      all <productname>PostgreSQL</productname> to be accessed by
      <productname>pgpool-II</productname> is strongly recommended, as
      it is used internally by <productname>pgpool-II</productname>.
      Without this, handling of duplicate table names in different
      schema might cause trouble (temporary tables aren't a problem).
      If you are using <productname>PostgreSQL</productname> 9.4 or
      later, installing <function>pgpool_regclass</function> is not
      necessary since an equivalent (<function>to_regclass</function>)
      is included in the <productname>PostgreSQL</productname> core.
    </para>

    <para>
      <programlisting>
$ cd pgpool-II-x.x.x/sql/pgpool-regclass
$ make
$ make install
      </programlisting>
      After this:
      <programlisting>
$ psql -f pgpool-regclass.sql template1
      </programlisting>

      or

      <programlisting>
$ psql template1
=# CREATE EXTENSION pgpool_regclass;
      </programlisting>

      Executing <filename>pgpool-regclass.sql</filename>
      or <command>CREATE EXTENSION</command> should be performed on
      every databases accessed
      with <productname>pgpool-II</productname>.  You do not need to
      do this for a database created after the execution of
      <command>psql -f pgpool-regclass.sql template1</command>
      or <command>CREATE EXTENSION</command>, as this template
      database will be cloned to create new databases.
    </para>

  </sect2>

  <sect2 id="create-installlock-table">
    <title>Creating insert_lock table</title>
    <para>
      If you plan to use native replication mode and insert_lock,
      creating <structname>pgpool_catalog.insert_lock</structname>
      table for mutual exclusion is strongly recommended.  Without
      this, insert_lock works so far. However in that
      case <productname>pgpool-II</productname> locks against the
      insert target table. This behavior is same
      as <productname>pgpool-II</productname> 2.2 and 2.3 series. The
      table lock conflicts
      with <command>VACUUM</command>. So <command>INSERT</command>
      processing may be thereby kept waiting for a long time.

      <programlisting>
	$ cd pgpool-II-x.x.x/sql
	$ psql -f insert_lock.sql template1
      </programlisting>

    </para>

    <para>
      Executing <filename>insert_lock.sql</filename> should be
      performed on every databases accessed
      with <productname>pgpool-II</productname>.  You do not need to
      do this for a database created after the execution of
      <command>psql -f insert_lock.sql template1</command>, as this
      template database will be cloned to create new databases.
    </para>
  </sect2>

 </sect1>

</chapter>
