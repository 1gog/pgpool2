<!-- doc/src/sgml/config.sgml -->

<sect1 id="runtime-config-connection">
  <title>Connections and Authentication</title>

  <para>
    listen_addresses, num_init_children
  </para>

  <sect2 id="runtime-config-connection-settings">
    <title>Connection Settings</title>

    <variablelist>

      <varlistentry id="guc-listen-addresses" xreflabel="listen_addresses">
	<term><varname>listen_addresses</varname> (<type>string</type>)
	  <indexterm>
	    <primary><varname>listen_addresses</varname> configuration parameter</primary>
	  </indexterm>
	</term>
	<listitem>
	  <para>
	    Specifies the hostname or IP address, on which pgpool-II
	    will accept TCP/IP connections. <literal>'*'</literal>
	    accepts all incoming connections. <literal>''</literal>
	    disables TCP/IP connections. Default
	    is <literal>'localhost'</literal>. Connections via UNIX
	    domain socket are always accepted.
	  </para>
	  <para>
	    This parameter can only be set at server start.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry id="guc-port" xreflabel="port">
	<term><varname>port</varname> (<type>integer</type>)
	  <indexterm>
	    <primary><varname>port</varname> configuration parameter</primary>
	  </indexterm>
	</term>
	<listitem>
	  <para>
	    The port number used
	    by <productname>Pgpool-II</productname> to listen for
	    connections. Default is 9999.
	  </para>
	  <para>
	    This parameter can only be set at server start.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry id="guc-socket-dir" xreflabel="socket_dir">
	<term><varname>socket_dir</varname> (<type>string</type>)
	  <indexterm>
	    <primary><varname>socket_dir</varname> configuration parameter</primary>
	  </indexterm>
	</term>
	<listitem>
	  <para>
	    The directory where the UNIX domain socket accepting connections for
	    <productname>Pgpool-II</productname> will be
	    created. Default is <literal>/tmp</literal>. Be aware that this
	    socket might be deleted by a cron job. We recommend to set this
	    value to <literal>/var/run</literal> or such directory.
	  </para>
	  <para>
	    This parameter can only be set at server start.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry id="guc-pcp-listen-addresses" xreflabel="pcp_listen_addresses">
	<term><varname>pcp_listen_addresses</varname> (<type>string</type>)
	  <indexterm>
	    <primary><varname>pcp_listen_addresses</varname> configuration parameter</primary>
	  </indexterm>
	</term>
	<listitem>
	  <para>
	    Specifies the hostname or IP address, on which pcp process
	    will accept TCP/IP connections. <literal>*</literal>
	    accepts all incoming connections. <literal>"" </literal>
	    disables TCP/IP connections. Default
	    is <literal>*</literal>. Connections via UNIX domain
	    socket are always accepted.
	  </para>
	  <para>
	    This parameter can only be set at server start.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry id="guc-pcp-port" xreflabel="pcp_port">
	<term><varname>pcp_port</varname> (<type>integer</type>)
	  <indexterm>
	    <primary><varname>pcp_port</varname> configuration parameter</primary>
	  </indexterm>
	</term>
	<listitem>
	  <para>
	    The port number used by <productname>PCP</productname>
	    process to listen for connections. Default is 9898.
	  </para>
	  <para>
	    This parameter can only be set at server start.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry id="guc-pcp-socket-dir" xreflabel="pcp_socket_dir">
	<term><varname>pcp_socket_dir</varname> (<type>string</type>)
	  <indexterm>
	    <primary><varname>pcp_socket_dir</varname> configuration parameter</primary>
	  </indexterm>
	</term>
	<listitem>
	  <para>
	    The directory where the UNIX domain socket accepting connections for
	    <productname>PCP</productname> process will be
	    created. Default is <literal>/tmp</literal>. Be aware that
	    this socket might be deleted by a cron job. We recommend
	    to set this value to <literal>/var/run</literal> or such
	    directory.
	  </para>
	  <para>
	    This parameter can only be set at server start.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry id="guc-num-init-children" xreflabel="num_init_children">
	<term><varname>num_init_children</varname> (<type>integer</type>)
	  <indexterm>
	    <primary><varname>num_init_children</varname> configuration parameter</primary>
	  </indexterm>
	</term>
	<listitem>
	  <para>
	    The number of
	    preforked <productname>Pgpool-II</productname> server
	    processes. Default is 32.  num_init_children is also the
	    concurrent connections limit
	    to <productname>Pgpool-II</productname> from clients.  If
	    more than num_init_children clients try to connect to
	    <productname>Pgpool-II</productname>, <emphasis>they are
	    blocked (not rejected) until a connection to
	    any <productname>Pgpool-II</productname> process is
	    closed</emphasis>.  Up to
	    listen_backlog_multiplier*num_init_children can be queued.
	  </para>
	  <para>
	    The queue is inside the kernel called "listen queue". The
	    length of the listen queue is called "backlog".  There is
	    an upper limit of the backlog in some systems, and if
	    num_init_children*listen_backlog_multiplier exceeds the
	    number, you need to set the backlong higher. Otherwise,
	    following problems may occur in heavy loaded systems: 1)
	    connecting to <productname>Pgpool-II</productname> fails
	    2) connecting to <productname>Pgpool-II</productname> is
	    getting slow because of retries in the kernel.  You can
	    check if the listen queue is actually overflowed by using
	    "netstat -s" command.  If you find something like:
	    <programlisting>
535 times the listen queue of a socket overflowed
	    </programlisting>
	    then the listen queue is definitely overflowed.
	    You should increase the backlog in this case (you will be required a super user privilege).
	    <programlisting>
# sysctl net.core.somaxconn
net.core.somaxconn = 128
# sysctl -w net.core.somaxconn = 256
	    </programlisting>
You could add following to /etc/sysctl.conf instead.
	    <programlisting>
net.core.somaxconn = 256
	    </programlisting>
	  </para>
	  <para>
	    Number of connections to each PostgreSQL is roughly max_pool*num_init_children.
	  </para>

	  <para>
            Canceling a query creates another
            connection to the backend; thus, a query cannot be canceled if
            all the connections are in use. If you want to ensure that queries can
            be canceled, set this value to twice the expected connections.
	  </para>
	  <para>
            <productname>PostgreSQL</productname> allows concurrent
            connections for non superusers up to max_connections -
            superuser_reserved_connections.
	  </para>
	  <para>
	    In summary, max_pool, num_init_children, max_connections,
	    superuser_reserved_connections must satisfy the following formula:
	    <programlisting>
max_pool*num_init_children &lt;= (max_connections - superuser_reserved_connections) (no query canceling needed)
max_pool*num_init_children*2 &lt;= (max_connections - superuser_reserved_connections) (query canceling needed)
	    </programlisting>
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </sect2>

	<sect2 id="runtime-config-authentication-settings">
		<title>Authentication Settings</title>
		<variablelist>

			<varlistentry id="guc-enable-pool-hba" xreflabel="enable_pool_hba">
				<term><varname>enable_pool_hba</varname> (<type>boolean</type>)
					<indexterm>
						<primary><varname>enable_pool_hba</varname> configuration parameter</primary>
					</indexterm>
				</term>
				<listitem>
					<para>
						If true <productname>Pgpool-II</productname> will use the
						<filename>pool_hba.conf</filename> for the client authentication.
						See <xref linkend="auth-pool-hba-conf"> for details on how to configure
						<filename>pool_hba.conf</filename> for client authentication.
						Default is <literal>false</literal>
					</para>
					<para>
						This parameter can be changed by reloading pgpool configuration..
					</para>
				</listitem>
			</varlistentry>

			<varlistentry id="guc-pool-passwd" xreflabel="pool_passwd">
				<term><varname>pool_passwd</varname> (<type>string</type>)
					<indexterm>
						<primary><varname>pool_passwd</varname> configuration parameter</primary>
					</indexterm>
				</term>
				<listitem>
					<para>
						Specify the pool_passwd file name for md5 authentication.
						Default value is <literal>"pool_passwd"</literal>.
						See <xref linkend="auth-md5"> for more details.
					</para>
					<para>
						This parameter can only be set at server start.
					</para>
				</listitem>
			</varlistentry>

			<varlistentry id="guc-authentication-timeout" xreflabel="authentication_timeout">
				<term><varname>listen_addresses</varname> (<type>integer</type>)
					<indexterm>
						<primary><varname>authentication_timeout</varname> configuration parameter</primary>
					</indexterm>
				</term>
				<listitem>
					<para>
						Specify the timeout in seconds for <productname>Pgpool-II</productname>
						authentication. Specifying 0 disables the time out.
						Default value is 60
					</para>
					<para>
						This parameter can be changed by reloading pgpool configuration..
					</para>
				</listitem>
			</varlistentry>

		</variablelist>

  </sect2>
</sect1>

<sect1 id="runtime-config-runnung-mode">
  <title>Running mode</title>

  <sect2 id="runtime-config-master-slave-mode">
    <title>Master slave mode</title>

    <variablelist>

      <varlistentry id="guc-master-slave" xreflabel="master_slave_mode">
	<term><varname>listen_addresses</varname> (<type>string</type>)
	  <indexterm>
	    <primary><varname>listen_addresses</varname> configuration parameter</primary>
	  </indexterm>
	</term>
	<listitem>
	  <para>
	    Specifies the TCP/IP address(es) on which the server is
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </sect2>
</sect1>

<sect1 id="runtime-config-backend-settings">
  <title>Backend Settings</title>

  <sect2 id="runtime-config-backend-connection-settings">
    <title>Backend Connection Settings</title>

    <variablelist>

      <varlistentry id="guc-backend-hostname" xreflabel="backend_hostname">
	<term><varname>backend_hostname</varname> (<type>string</type>)
	  <indexterm>
	    <primary><varname>backend_hostname</varname> configuration parameter</primary>
	  </indexterm>
	</term>

	<listitem>
	  <para>
            <varname>backend_hostname</varname> specifies where to
            connect to the <productname>PostgreSQL</productname>
            backend. It is used
            by <productname>pgpool-II</productname> to communicate
            with the server.
	  </para>

	  <para>
	    For TCP/IP communication, this parameter can take a hostname
	    or an IP address. If this begins with a slash, it specifies
	    Unix-domain communication rather than TCP/IP; the value is
	    the name of the directory in which the socket file is
	    stored. The default behavior when backend_hostname is empty
	    ('') is to connect to a Unix-domain socket in /tmp.
	  </para>

	  <para>
	    Multiple backends can be specified by adding a number at the
	    end of the parameter name (e.g.backend_hostname0). This
	    number is referred to as "DB node ID", and it starts from
	    0. The backend which was given the DB node ID of 0 will be
	    called "Master DB". When multiple backends are defined, the
	    service can be continued even if the Master DB is down (not
	    true in some modes). In this case, the youngest DB node ID
	    alive will be the new Master DB.
	  </para>

	  <para>
	    Please note that the DB node which has id 0 has no special
	    meaning if operated in streaming replication mode. Rather,
	    you should care about if the DB node is the "primary node" or
	    not. See Streaming Replication for more details.
	  </para>

	  <para>
	    If you plan to use only one PostgreSQL server, specify it by
	    backend_hostname0.
	  </para>

	  <para>
	    New nodes can be added in this parameter by reloading a
	    configuration file. However, values cannot be updated so
	    you must restart <productname>pgpool-II</productname> in
	    that case.
	  </para>

	</listitem>

      </varlistentry>

      <varlistentry id="guc-backend-port" xreflabel="backend_port">
	<term><varname>backend_port</varname> (<type>integer</type>)
	  <indexterm>
	    <primary><varname>backend_port</varname> configuration parameter</primary>
	  </indexterm>
	</term>

	<listitem>
	  <para>
            <varname>backend_port</varname> specifies the port number
            of the backends. Multiple backends can be specified by
            adding a number at the end of the parameter name
            (e.g. backend_port0). If you plan to use only one
            PostgreSQL server, specify it by backend_port0.
	  </para>
	  <para>
	    New backend ports can be added in this parameter by
	    reloading a configuration file. However, values cannot be
	    updated so you must
	    restart <productname>pgpool-II</productname> in that case.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </sect2>

  <sect2 id="runtime-config-backend-data">
    <title>Backend Data Settings</title>

    <variablelist>

      <varlistentry id="guc-backend-data-directory" xreflabel="backend_data_directory">
	<term><varname>backend_data_directory</varname> (<type>string</type>)
	  <indexterm>
	    <primary><varname>backend_data_directory</varname> configuration parameter</primary>
	  </indexterm>
	</term>

	<listitem>
	  <para>
            <varname>backend_data_directory</varname> specifies the
            database directory. Multiple backends can be
            specified by adding a number at the end of the parameter
            name (e.g. backend_data_directory0). If you plan to use
            only one PostgreSQL server, specify it by
            backend_data_directory0.
	  </para>
	  <para>
	    New backend data_directorys can be added in this parameter
	    by reloading a configuration file. However, values cannot
	    be updated so you must
	    restart <productname>pgpool-II</productname> in that case.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry id="guc-backend-flag" xreflabel="backend_flag">
	<term><varname>backend_flag</varname> (<type>string</type>)
	  <indexterm>
	    <primary><varname>backend_flag</varname> configuration parameter</primary>
	  </indexterm>
	</term>

	<listitem>
	  <para>
            <varname>backend_flag</varname> controls various backend
            behavior. Multiple backends can be specified by adding a
            number at the end of the parameter name
            (e.g. backend_flag0). If you plan to use only one
            PostgreSQL server, specify it by backend_flag0.
	  </para>
	  <para>
	    New backend flags can be added in this parameter by
	    reloading a configuration file.  Currently followings are
	    allowed. Multiple flags can be specified by using "|".
	  </para>

	  <table id="backend-flag-table">
	    <title>Backend flags</title>
	    <tgroup cols="2">
	      <thead>
		<row>
		  <entry>Flag</entry>
		  <entry>Description</entry>
		</row>
	      </thead>

	      <tbody>
		<row>
		  <entry><literal>ALLOW_TO_FAILOVER</literal></entry>
		  <entry>Allow to failover or detaching backend. This
		    is the default. You cannot specify with
		    DISALLOW_TO_FAILOVER at a same time.</entry>
		</row>
		<row>
		  <entry><literal>DISALLOW_TO_FAILOVER</literal></entry>
		  <entry>This is useful when you protect backend by
		    using HA (High Availability) softwares such as
		    Heartbeat or Pacemaker. You cannot specify with
		    ALLOW_TO_FAILOVER at a same time.
		  </entry>
		</row>
	      </tbody>
	    </tgroup>
	  </table>

	</listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
