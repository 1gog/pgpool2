<!-- doc/src/sgml/release-3.5.sgml -->
<!-- See header comment in release.sgml about typical markup -->

<sect1 id="release-3-5-5">
  <title>Release 3.5.5</title>

  <note>
    <title>Release Date</title>
    <simpara>2016-12-26</simpara>
  </note>

  <sect2>
    <title>Bug fixes</title>

    <itemizedlist>

      <listitem>
	<!--
	    2016-12-23 [4124e5e]
	  -->
	<para>
      Tightening up the watchdog security. (Muhammad Usama)
    </para>

    <para>
      Now wd_authkey uses the HMAC SHA-256 hashing.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-12-22 [f8a157a]
	  -->
	<para>
	  Add pgpool_adm extension in <productname>Pgpool-II</productname> RPM. (Bo Peng)
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-12-20 [888ac16]
	  -->
	<para>
	  Fix occasional segfault when query cache is enabled. (bug 263) (Tatsuo Ishii)
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-12-20 [9274f82]
	  -->
	<para>
	  Fix packet kind does not match error in extended protocol. (bug 231) (Tatsuo Ishii)
	</para>
	<para>
	  According to the bug231, the bug seem to bite you if all of
	  following conditions are met:
	</para>
	<itemizedlist>
	  <listitem>
	    <para>
	      Streaming replication mode
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Load balance node is not node 0
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Extended protocol is used
	      </para>
	  </listitem>
	  <listitem>
	    <para>
	      SELECT is executed, the statement is closed, then a
	      transaction command is executed
	    </para>
	  </listitem>
	</itemizedlist>
	<para>
	The sequence of how the problem bites is:
	<orderedlist>
	  <listitem>
	    <para>
	      SELECT executes on statement S1 on the load balance node 1
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Frontend send Close statement
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Pgool-II forward it to backend 1
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Frontend sends Parse, Bind, Execute of COMMIT
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Pgool-II forward it to backend 0 & 1
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Frontend sends sync message
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Pgool-II forward it to backend 0 & 1
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Backend 0 replies back Parse complete ("1"), while
	      backend 1 replies back close complete ("3") because of
	      #3.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Kind mismatch occurs
	    </para>
	  </listitem>
	</orderedlist>

	</para>
	<para>
	  The solution is, in #3, let Pgpool-II wait for response from backend
	  1, but do not read the response message. Later on Pgpool-II's state
	  machine will read the response from it before the sync message is sent
	  in #6. With this, backend 1 will reply back "1" in #8, and the kind
	  mismatch error does not occur.
	</para>
	<para>
	  Also, fix not calling pool_set_doing_extended_query_message() when
	  receives Close message.  (I don't know why it was missed).
	</para>
	<para>
	  New regression test "067.bug231" was added.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-12-06 [336e932]
	  -->
	<para>
	  Fix a race condition in a signal handler per bug 265. (Tatsuo Ishii)
	</para>
	<para>
	  In child.c there's signal handler which calls elog. Since the signal
	  handler is not blocked against other signals while processing, deadlock
	  could occur in the system calls in the pgpool shutdown sequence. To
	  fix the problem, now the signal handler is blocked by using
	  POOL_SETMASK.
	</para>
	<para>
	  Ideally we should avoid calling elog in signal handlers though.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-11-26 [045a59f]
	  -->
	<para>
	  Back porting the improved failover command propagation mechanism from Pgpool-II 3.6 (Muhammad Usama)
	</para>
	<para>
	  Overhauling the design of how failover, failback and promote node commands are
	  propagated to the watchdog nodes. Previously the watchdog on pgpool-II node that
	  needs to perform the node command (failover, failback or promote node) used to
	  broadcast the failover command to all attached pgpool-II nodes. And this
	  sometimes makes the synchronization issues, especially when the watchdog cluster
	  contains a large number of nodes and consequently the failover command sometimes
	  gets executed by more than one pgpool-II.
	</para>
	<para>
	  Now with this commit all the node commands are forwarded to the
	  master/coordinator watchdog, which in turn propagates to all standby nodes.
	  Apart from above the commit also changes the failover command interlocking
	  mechanism and now only the master/coordinator node can become the lock holder
	  so the failover commands will only get executed on the master/coordinator node.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-10-27 [f37c592]
	  -->
	<para>
	  Do not cancel a query when the query resulted in an error other than in native replication mode. (Tatsuo Ishii)
	</para>
	<para>
	  It was intended to keep the consistency, but there's no point in other
	  than native replication mode.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-10-27 [c9e203d]
	  -->
	<para>
	  Remove obsoleted option "-c" in pgpool command. (Tatsuo Ishii)
	</para>
	<para>
	  Also fix typo in the help message.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-10-18 [8da0e7f]
	  -->
	<para>
	  Fix for 0000252: authentication failed error when PCP command is cancelled... (Muhammad Usama)
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-09-24 [8aa7586]
	  -->
	<para>
	  Change the default value of search_primary_node_timeout from 10 to 300. (Tatsuo Ishii)
	</para>
	<para>
	  Prior default value 10 seconds is sometimes too short for a standby to
	  be promoted.
	</para>
	<para>
	  Per [pgpool-general: 5026].
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-09-21 [b306e04]
	  -->
	<para>
	  Fix the case when all backends are down then 1 node attached. (Tatsuo Ishii)
	</para>
	<para>
	  When all backends are down, no connection is accepted. Then 1
	  PostgreSQL becomes up, and attach the node using pcp_attach_node. It
	  successfully finishes. However, when a new connection arrives, still
	  the connection is refused because pgpool child process looks into the
	  cached status, in which the recovered node is still in down status if
	  mode is streaming replication mode (native replication and other modes
	  are fine). Solution is, if all nodes are down, force to restart all
	  pgpool child.
	</para>
	<para>
	  Per bug 248.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-09-20 [a38fa09]
	  -->
	<para>
	  Fix for: [pgpool-general: 4997] Avoiding downtime when pgpool changes require a restart (Muhammad Usama)
	</para>
	<para>
	  To fix this, The verification mechanism of configuration parameter values is
	  reversed, previously the standby nodes used to verify their parameter values
	  against the respective values on the master pgpool-II node and when the
	  inconsistency was found the FATAL error was thrown, now with this commit the
	  verification responsibility is delegated to the master pgpool-II node.
	  Now the master node will verify the configuration parameter values of each
	  joining standby node against its local values and will produce
	  a WARNING message instead of an error in case of a difference.
	  This way the nodes having the different configurations will also be allowed to
	  join the watchdog cluster and the user has to manually look out for the
	  configuration inconsistency warnings in the master pgpool-II log to avoid the
	  surprises at the time of pgpool-II master switch over.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-09-13 [1c99580]
	  -->
	<para>
      Add compiler flag "-fno-strict-aliasing" in configure.ac to fix compiler error. (Tatsuo Ishii)
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-09-09 [8231f65]
	  -->
	<para>
	  Do not use random() while generating MD5 salt. (Tatsuo Ishii)
	</para>
	<para>
        <function>random()</function> should not be used in security related applications.  To
        replace <function>random()</function>, import <function>PostmasterRandom()</function> from PostgreSQL.  Also
        store current time at the start up of <productname>Pgpool-II</productname> main process for later
        use.
	</para>

      </listitem>

      <listitem>
	<!--
	    2016-09-06 [891ce0f]
	  -->
	<para>
	  Don't ignore sync message from frontend when query cache is enabled. (Tatsuo Ishii)
	</para>
      </listitem>

    </itemizedlist>

  </sect2>

</sect1>
