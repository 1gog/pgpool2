<!-- doc/src/sgml/config.sgml -->

<sect1 id="runtime-online-recovery">
  <title>Online Recovery</title>

  <para>
    recovery_user, recovery_password,recovery_1st_stage_command,
    recovery_2nd_stage_command,recovery_timeout, client_idle_limit_in_recovery
  </para>
  <para>
    <productname>Pgpool-II</productname>
  </para>

  <variablelist>

    <varlistentry id="guc-recovery-user" xreflabel="recovery_user">
      <term><varname>recovery_user</varname> (<type>string</type>)
        <indexterm>
        <primary><varname>recovery_user</varname> configuration parameter</primary>
        </indexterm>
      </term>
      <listitem>
      <para>
        Specifies the PostgreSQL user name to perform online recovery.
      </para>
        <para>
          This parameter can be changed by reloading the pgpool configurations.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry id="guc-recovery-password" xreflabel="recovery_password">
      <term><varname>recovery_password</varname> (<type>string</type>)
        <indexterm>
        <primary><varname>recovery_password</varname> configuration parameter</primary>
        </indexterm>
      </term>
      <listitem>
        <para>
          Specifies the password for the PostgreSQL user name configured in
          <xref linkend="guc-recovery-user"> to perform online recovery.
        </para>
        <para>
          This parameter can be changed by reloading the pgpool configurations.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry id="guc-recovery-1st-stage-command" xreflabel="recovery_1st_stage_command">
      <term><varname>recovery_1st_stage_command</varname> (<type>string</type>)
        <indexterm>
        <primary><varname>recovery_1st_stage_command</varname> configuration parameter</primary>
        </indexterm>
      </term>
      <listitem>
        <para>
          Specifies a command to be run by master(primary) PostgreSQL server at the
          first stage of online recovery. The command file must be placed in the
          database cluster directory for security reasons.
          For example, if <varname>recovery_1st_stage_command</varname> = <literal>
          'sync-command'</literal>, then <productname>Pgpool-II</productname> will
          look for the command scrit in <literal>$PGDATA</literal> directory and will
          try to execute <command>$PGDATA/sync-command</command>.
        </para>
        <para>
          <varname>recovery_1st_stage_command</varname> receives following 4 parameters:
        </para>

        <itemizedlist>
          <listitem>
            <para>
              Path to master(primary) database cluster.
            </para>
          </listitem>
          <listitem>
            <para>
              PostgreSQL host name to be recovered.
            </para>
          </listitem>
          <listitem>
            <para>
              Path to database cluster to be recovered.
            </para>
          </listitem>
          <listitem>
            <para>
              Master database port number.
            </para>
          </listitem>
        </itemizedlist>

        <note>
          <para>
            <productname>Pgpool-II</productname> accept connections and queries
            while <varname>recovery_1st_stage command</varname> is executed.
            So You can retrieve and update data during this stage.
          </para>
        </note>

        <caution>
          <para>
            <varname>recovery_1st_stage command</varname> runs as a <acronym>SQL</acronym>
            command from PostgreSQL's point of view. So <varname>recovery_1st_stage command
            </varname> can get prematuraly killed by PostgreSQL if the PostgreSQL's
            <varname>statement_time_out</varname> is configured with the value that is
            smaller than the time <varname>recovery_1st_stage_command</varname> takes for
            completion.
          </para>
          <para>
            Typical error in such case is
            <programlisting>
rsync used in the command is killed by signal 2 for example.
            </programlisting>
          </para>
        </caution>

        <para>
          This parameter can be changed by reloading the pgpool configurations.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry id="guc-recovery-2nd-stage-command" xreflabel="recovery_2nd_stage_command">
      <term><varname>recovery_2nd_stage_command</varname> (<type>string</type>)
        <indexterm>
        <primary><varname>recovery_2nd_stage_command</varname> configuration parameter</primary>
        </indexterm>
      </term>
      <listitem>

        <para>
          Specifies a command to be run by master(primary) PostgreSQL server at the
          second stage of online recovery. The command file must be placed in the
          database cluster directory for security reasons.
          For example, if <varname>recovery_2nd_stage_command</varname> = <literal>
          'sync-command'</literal>, then <productname>Pgpool-II</productname> will
          look for the command scrit in <literal>$PGDATA</literal> directory and will
          try to execute <command>$PGDATA/sync-command</command>.
        </para>
        <para>
          <varname>recovery_2nd_stage_command</varname> receives following 4 parameters:
        </para>

        <itemizedlist>
          <listitem>
            <para>
              Path to master(primary) database cluster.
            </para>
          </listitem>
          <listitem>
            <para>
              PostgreSQL host name to be recovered.
            </para>
          </listitem>
          <listitem>
            <para>
              Path to database cluster to be recovered.
            </para>
          </listitem>
          <listitem>
            <para>
              Port number of database to be recovered.
            </para>
          </listitem>
        </itemizedlist>

        <note>
          <para>
            <productname>Pgpool-II</productname> <emphasis>does not</emphasis>
            accept client connections and queries during the execution
            of <varname>recovery_2nd_stage command</varname> command, and waits
            for the existing clients to close their connections before executing the
            command.
            So the <varname>recovery_2nd_stage command</varname> may not execute
            if the client stays connected for a long time.
          </para>
        </note>

        <caution>
          <para>
            <varname>recovery_2nd_stage command</varname> runs as a <acronym>SQL</acronym>
            command from PostgreSQL's point of view. So <varname>recovery_2nd_stage command
            </varname> can get prematuraly killed by PostgreSQL if the PostgreSQL's
            <varname>statement_time_out</varname> is configured with the value that is
            smaller than the time <varname>recovery_2nd_stage_command</varname> takes for
            completion.
          </para>
        </caution>

        <para>
          This parameter can be changed by reloading the pgpool configurations.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry id="guc-recovery-timeout" xreflabel="recovery_timeout">
      <term><varname>recovery_timeout</varname> (<type>integer</type>)
        <indexterm>
        <primary><varname>recovery_timeout</varname> configuration parameter</primary>
        </indexterm>
      </term>
      <listitem>
        <para>
          Specifies the timeout in seconds to cancel the online recovery if it
          does not completes within this time.
          Since <productname>Pgpool-II</productname> does not accepts the connections
          during the second stage of recovery so this parameter can be used to cancel
          the online recovery to manage the service down time during the online recovery.
        </para>
        <para>
          This parameter can be changed by reloading the pgpool configurations.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry id="guc-client-idle-limit-in-recovery" xreflabel="client_idle_limit_in_recovery">
      <term><varname>client_idle_limit_in_recovery</varname> (<type>integer</type>)
        <indexterm>
        <primary><varname>client_idle_limit_in_recovery</varname> configuration parameter</primary>
        </indexterm>
      </term>
      <listitem>
        <para>
          Specifies the time in seconds to disconnect a client if it remains idle
          since the last query during the online recovery.
          <varname>client_idle_limit_in_recovery</varname> is similar to the
          <xref linkend="guc-client-idle-limit"> but only takes effect during the
          second stage of online recovery.
        </para>
        <para>
          This is useful for preventing the <productname>Pgpool-II</productname>
          recovery from being disturbed by the lazy clients or if the TCP/IP
          connection between the client and <productname>Pgpool-II</productname>
          is accidentally down (a cut cable for instance).
        </para>
        <para>
          If set to -1, All clients get immediately disconnected when the second
          stage of online recovery starts..
          The default is 0, which turns off the feature.
        </para>

        <para>
          This parameter can be changed by reloading the pgpool configurations.
        </para>
      </listitem>
    </varlistentry>

  </variablelist>
</sect1>
