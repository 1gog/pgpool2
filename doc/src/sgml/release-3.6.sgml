<!-- doc/src/sgml/release-3.6.sgml -->
<!-- See header comment in release.sgml about typical markup -->

<sect1 id="release-3-6">
  <title>Release 3.6</title>

  <note>
    <title>Release Date</title>
    <simpara>2016-11-xx</simpara>
  </note>

  <sect2>
    <title>Overview</title>

    <para>
      Major enhancements in <productname>Pgpool-II</productname> 3.6 include:
    </para>

    <!-- Items in this list summarize one or more items below -->

    <itemizedlist>

      <listitem>
	<para>
	  Improve the behavior of fail-over. In the steaming
	  replication mode, client sessions will not be disconnected
	  when a fail-over occurs any more if the session does not use
	  the failed standby server. If the primary server goes down,
	  still all sessions will be disconnected. Also it is possible
	  to connect to <productname>Pgpool-II</productname> even if
	  it is doing health checking retries. Before all attempt of
	  connecting to <productname>Pgpool-II</productname> failed
	  while doing health checking retries.
	</para>
      </listitem>

      <listitem>
	<para>
	  New PGPOOL SET command has been introduced. Certain
	  configuration parameters now can be changed on the fly in a
	  session.
	</para>
      </listitem>

      <listitem>
	<para>
	  Watchdog is significantly enhanced. It becomes more reliable
	  than previous releases.
	</para>
      </listitem>

      <listitem>
	<para>
	  Handling of extended query protocol (e.g. used by Java
	  applications) in streaming replication mode speeds up if
	  many rows are returned in a result set.
	</para>
      </listitem>

      <listitem>
	<para>
	  Import parser of PostgreSQL 9.6.
	</para>
      </listitem>

      <listitem>
	<para>
	  In some cases pg_terminate_backend() now does not trigger a
	  fail-over.
	</para>
      </listitem>

      <listitem>
	<para>
	  Change documentation format from raw HTML to SGML.
	</para>
      </listitem>

    </itemizedlist>

    <para>
      The above items are explained in more detail in the sections below.
    </para>

  </sect2>

  <sect2>
    <title>Major Enhancements</title>

    <itemizedlist>

      <listitem>
	<!--
	    2016-04-17 [259cdf9] Do not restart child process if certain conditions met
	    2016-04-21 [9cc243a] Minimize the chance of session disconnection while failover
	    2016-05-05 [0d66032] Allow to access to pgpool while doing health checking
	  -->
	<para>
	  Improve the behavior of fail-over (Tatsuo Ishii)
	</para>
	<para>
	  In the steaming replication mode, client sessions will not
	  be disconnected when a fail-over occurs any more if the
	  session does not use the failed standby server. If the
	  primary server goes down, still all sessions will be
	  disconnected. Health check timeout case will also cause the
	  full session disconnection. Other health check error,
	  including retry over case does not trigger full session
	  disconnection.
	</para>

	<para>
	  For user's convenience, "show pool_nodes" command shows the
	  session local load balance node info since this is important
	  for users in case of fail-over. If the load balance node is
	  not the failed node, the session will not be affected by
	  fail-over.
	</para>

	<para>
	  Also now it is possible to connect
	  to <productname>Pgpool-II</productname> even if it is doing
	  health checking retries. Before all attempt of connecting
	  to <productname>Pgpool-II</productname> failed while doing
	  health checking retries.  Before any attempt to connect to
	  <productname>Pgpool-II</productname> fails if it is doing a
	  health check against failed node even if
	  <xref linkend="guc-fail-over-on-backend-error"> is off
	  because <productname>Pgpool-II</productname> child first
	  tries to connect to all backend including the failed one and
	  exits if it fails to connect to a backend (of course it
	  fails). This is a temporary situation and will be resolved
	  before pgpool executes fail-over. However if the health check
	  is retrying, the temporary situation keeps longer depending
	  on the setting
	  of <xref linkend="guc-health-check-max-retries"> and
	  <xref linkend="guc-health-check-retry-delay">. This is not
	  good. Attached patch tries to mitigate the problem:
	</para>
	<para>
	  When an attempt to connect to backend fails, give up
	  connecting to the failed node and skip to other node, rather
	  than exiting the process if operating in streaming
	  replication mode and the node is not primary node.
	</para>
	<para>
	  Mark the local status of the failed node to "down".  This
	  will let the primary node be selected as a load balance node
	  and every queries will be sent to the primary node. If
	  there's other healthy standby nodes, one of them will be
	  chosen as the load balance node.
	</para>
	<para>
	  After the session is over, the child process will suicide to
	  not retain the local status.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-05-22 [b9955ce] Adding new PGPOOL SET and PGPOOL RESET commands.
	    2016-05-11 [25dc79e] Adding new SHOW command for pgpool-II configuration parameters.
	  -->
	<para>
	  Add <link linkend="SQL-PGPOOL-SHOW">PGPOOL
	  SHOW</link>, <link linkend="SQL-PGPOOL-SET">PGPOOL
	  SET</link> and
	  <link linkend="SQL-PGPOOL-RESET">PGPOOL RESET</link>
	  commands (Muhammad Usama).
	</para>
	<para>
	  These are similar to the PostgreSQL's SET and SHOW commands
	  for GUC variables, adding the functionality
	  in <productname>Pgpool-II</productname> to set and reset the
	  value of config parameters for the current session, and for
	  that it adds a new syntax
	  in <productname>Pgpool-II</productname> which is similar to
	  PostgreSQL's SET and RESET variable syntax with an addition
	  of <literal>PGPOOL</literal> keyword at the start.
	</para>
	<para>
	  Currently supported configuration parameters by PGPOOL
	  SHOW/SET/RESET are: <xref linkend="guc-log-statement">,
	  <xref linkend="guc-log-per-node-statement">, <xref linkend="guc-check-temp-table">,
	  <xref linkend="guc-check-unlogged-table">, <xref linkend="guc-allow-sql-comments">,
	  <xref linkend="guc-client-idle-limit">, <xref linkend="guc-log-error-verbosity">,
	  <xref linkend="guc-client-min-messages">, <xref linkend="guc-log-min-messages">,
	  <xref linkend="guc-client-idle-limit-in-recovery">.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-08-02 [bda946e] Fix for 218: Inconsistent status of
	    Postgresql nodes in pgPool instances after
	    restart. Watchdog not syncing status.
	  -->
	<para>
	  Sync inconsitent status
	  of <productname>PostgreSQL</productname> nodes
	  in <productname>Pgpool-II</productname> instances after
	  restart (Muhammad Usama).
	</para>
	<para>
	  At the <productname>Pgpool-II</productname> startup, The
	  status of each configured backend node is loaded from the
	  backend status file or otherwise initialized by querying the
	  backend nodes. This technique works fine in stand alone mode
	  and also with the watchdog enabled as long as the status of
	  backend nodes remains consistent until
	  all <productname>Pgpool-II</productname> nodes got up and
	  running.  But since <productname>Pgpool-II</productname>
	  does not sync the backend node status from the watchdog
	  cluster at startup time, so in some cases
	  the <productname>Pgpool-II</productname> nodes participating
	  in the watchdog cluster may get a different status for the
	  same backend, especially if
	  the <productname>Pgpool-II</productname> nodes part of the
	  watchdog cluster starts at different times and between that
	  time an unavailable backend PostgreSQL node had become
	  available again.
	</para>
	<para>
    	  So to solve this, the commit implements the new startup
	  procedure for the
	  standby <productname>Pgpool-II</productname>, And now the
	  standby
	  <productname>Pgpool-II</productname> will load the backend
	  status of all
	  configured <productname>PostgreSQL</productname> nodes from
	  the watchdog master/coordinator node at the time of startup.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-09-06 [c0eb0ee] Enhance performance of SELECT when lots of rows involved.
	  -->
	<para>
	  Enhance performance of SELECT when lots of rows involved
	  (Tatsuo Ishii).
	</para>
	<para>
	  <productname>Pgpool-II</productname> flushes data to network
	  (calling write(2)) every time it sends a row data ("Data
	  Row" message) to frontend. For example, if 10,000 rows
	  needed to be transfer, 10,000 times write()s are
	  issued. This is pretty expensive. Since after repeating to
	  send row data, "Command Complete" message is sent, it's
	  enough to issue a write() with the command complete
	  message. Also there are unnecessary flushing are in handling
	  the command complete message.
	</para>
	<para>
	  <ulink url="http://www.pgpool.net/pipermail/pgpool-hackers/2016-September/001784.html">Quick
	  testing</ulink> showed that from 47% to 62% performance
	  enhancements were achieved in some cases.
	</para>
	<para>
	  Unfortunately, performance in workloads where transferring
	  few rows, will not be enhanced since such rows are needed to
	  flush to network anyway.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-08-26 [d768944] import PostgreSQL 9.6 parser
	  -->
	<para>
	  Import <productname>PostgreSQL</productname> 9.6's SQL
	  parser (Peng Bo).
	</para>
	<para>
	  This allows <productname>Pgpool-II</productname> to fully
	  understand the newly added SQL syntax such as <literal>COPY
	  INSERT RETURNING</literal>.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-08-26 [f284be4] Handling of pg_terminate_backend for simple query protocol
	  -->
	<para>
	  In some cases pg_terminate_backend() now does not trigger a
	  fail-over (Muhammad Usama).
	</para>
	<para>
	  Since the pg_terminate_backend function
	  in <productname>PostgreSQL</productname> is used to
	  terminate the backend connection, So what happens is, when
	  this function kills a <productname>PostgreSQL</productname>
	  backend that is connected to
	  the <productname>Pgpool-II</productname>, This disconnection
	  of backend by pg_terminate_backend function is appeared as a
	  backend node failure to
	  the <productname>Pgpool-II</productname>.  But the problem
	  here is, PostgreSQL does not give any information to the
	  client program that the connection is going to be killed
	  because of the pg_terminate_backend call and on the client
	  side, it looks similar to the backend node failure.
	</para>
	<para>
          Now to solve this in <productname>Pgpool-II</productname> we
	  need two things.  First is to identify the
	  pg_terminate_backend function in the query and the
	  <productname>Pgpool-II</productname> child process that
	  hosts the particular backend connection which will be killed
	  by that pg_terminate_backend function call, so that we get a
	  heads up in advance about the backend termination, and
	  secondly the routing of the query containing
	  pg_terminate_backend also needs a new logic so that the
	  query should be sent to the correct PostgreSQL node that
	  hosts the backend with the PID referred by the
	  pg_terminate_bakend()
	</para>
	<para>
	  So how does this commit handles pg_terminate_backend()??  In
	  the SimpleQuery() function which is the work horse of simple
	  query processing in the <productname>Pgpool-II</productname>
	  we start with the search of the pg_terminate_backend()
	  function call in the query parse tree and if the search
	  comes out to be successful, the next step is to locate
	  the <productname>Pgpool-II</productname> child process and a
	  backend node of that connection whose PID is specified in
	  pg_terminate_backend function's argument. Once the
	  connection and the <productname>Pgpool-II</productname>
	  child process is identified, we just set the
	  swallow_termination flag(added by this commit in
	  ConnectionInfo structure) for that connection in the shared
	  memory, and also set the query destination node to the
	  backend node that hosts that particular connection and does
	  not call pool_where_to_send() for this query so that the
	  query should be sent to the correct backend node.
	</para>
	<para>
          Now when the query is routed to the correct node and
	  consequently the backend gets killed, that results in the
	  communication error on <productname>Pgpool-II</productname>
	  side, the <productname>Pgpool-II</productname> already knows
	  that this disconnection is due the pg_terminate_backend and
	  not because of node failure as the swallow_termination flag
	  is already set for the connection.
	</para>
	<para>
	  Some works are still remaining.
	</para>
	<para>
	  pg_terminate_backend is not handled with extended query
	  protocol.
	</para>
	<para>
	  Currently we only support
	  pg_terminate_backend(constant number) function calls. If the
	  expression or sub query is used in the argument of
	  pg_terminate_backend then it would not be handled e.g
	  <programlisting>
pgpool=# select pg_terminate_backend(1025); -- Supported
pgpool=# select pg_terminate_backend( 2 +1); -- NOT SUPPORTED
pgpool=# select pg_terminate_backend((select 1)); -- NOT SUPPORTED
	  </programlisting>
	</para>
	<para>
	  Currently only one pg_terminate_backend call in a query is
	  handled.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-03-15 [47d9af9] Mega patch to add SGML docs.
	  -->
	<para>
          HTML documents are now generated from SGML documents
          (Muhammad Usama, Tatsuo Ishii, Peng Bo).
	</para>
	<para>
	  It is intended to have better construction, contents and
          maintainability. However, still there's tremendous room to
          enhance the SGML documents. Please help us!
	</para>
      </listitem>

    </itemizedlist>
  </sect2>

  <sect2>
    <title>Other Enhancements</title>

    <itemizedlist>

      <listitem>
	<!--
	    2016-08-24 [0f4d1de] Make authentication error message more user friendly.
	  -->

	<para>
	  Make authentication error message more user friendly (Tatsuo Ishii)
	</para>
	<para>
	  When attempt to connect to backend (including health
	  checking), emit error messages from backend something like
	  "sorry, too many clients already" instead of "invalid
	  authentication message response type, Expecting 'R' and
	  received '%c'"
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-08-22 [2088a17] Tighten up health check timer expired condition in pool_check_fd()
	  -->
	<para>
	  Tighten up health check timer expired condition in pool_check_fd() (Muhammad Usama)
	</para>
	<para>
	  Check if the signal was actually the health check timer
	  expire to make sure that we do not declare the timer expire
	  due to some other signal arrived while waiting for data for
	  health check in pool_check_fd().
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-07-29 [6ff2ac0] Add new script called "watchdog_setup".
	    2016-08-18 [d3211dc] Let watchdog_setup to be installed.
	  -->
	<para>
	  Add new script called "watchdog_setup" (Tatstuo Ishii)
	</para>
	<para>
	  <xref linkend="WATCHDOG-SETUP"> is a command to create a
	  temporary installation
	  of <productname>Pgpool-II</productname> clusters with
	  watchdog for mainly testings.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-07-29 [cf319c4] Add "-pg" option to pgpool_setup.
	    2016-08-16 [d5c3cf2]  Let pgpool_setup install into dist bin.
	  -->
	<para>
	  Add "-pg" option to pgpool_setup (Tatsuo Ishii)
	</para>
	<para>
	  This is useful when you want to assign specific port numbers to
	  <productname>PostgreSQL</productname> while
	  using <xref linkend="PGPOOL-SETUP">. Also
	  now <command>pgpool_setup</command> is installed in the
	  standard bin directory which is same
	  as <command>pgpool</command>.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-08-12 [9db83a8] Add "replication delay" column to "show pool_nodes".
	  -->
	<para>
	  Add "replication delay" column to "show pool_nodes" (Tatsuo Ishii)
	</para>
	<para>
	  This column
	  shows the <link linkend="runtime-streaming-replication-check">
	  replication delay</link> value in bytes if operated in
	  streaming replication mode.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-07-12 [726cb5d] Do not update status file if all backend nodes are in down status.
	  -->
	<para>
	  Do not update status file if all backend nodes are in down status (Chris Pacejo, Tatsuo Ishii)
	</para>
	<para>
	  This commit tries to remove the data inconsitency in
	  replication mode found
	  in <ulink url="http://www.pgpool.net/pipermail/pgpool-general/2015-August/003974.html">[pgpool-general:
	  3918]</ulink> by not recording the status file when all
	  backend nodes are in down status.  This surprisingly simple
	  but smart solution was provided by Chris Pacejo.
	</para> 
      </listitem>

      <listitem>
	<!--
	    2016-05-23 [9342472] Permit pgpool to support multiple SSL cipher protocols
	  -->
	<para>
	  Allow to use multiple SSL cipher protocols (Multiple Usama)
	</para>
	<para>
	  By replacing TLSv1_method() with SSLv23_method() while
	  initializing the SSL session, we can use more protocols than
	  TLSv1 protocol.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-04-07 [0e01d32] removing the limit on the maximum number of items in the black_function_list and white_function_list lists.
	  -->
	<para>
	  Allow to use arbitrary number of items in the
	  black_function_list/white_function_list (Muhammad Usama)
	</para>
	<para>
	  Previously there were fixed limits for those.
	</para>
      </listitem>
	
      <listitem>
	<!--
	    2016-02-17 [f2a5081] Properly process empty query (all comments)
	  -->
	<para>
	  Properly process empty queries (all comments) (Tatsuo Ishii)
	</para>
	<para>
	  <productname>Pgpool-II</productname> now recognizes an empty
	  query consisted of all comments (for example "/* DBD::Pg
	  ping test v3.5.3 */") (note that no ';') as an empty query.
	  </para>
	<para>
	  Before such that query was recognized an error.
	</para>
      </listitem>

      <listitem>
	<!--
	    2016-02-01 [342471f] Add some warning messages for wd_authkey hash calculation failure
	  -->
	<para>
	  Add some warning messages for wd_authkey hash calculation failure (Yugo Nagata)
	</para>
	<para>
	  Sometimes wd_authkey calculation fails for some reason other
	  than authkey mismatch. The additional messages make these
	  distinguishable for each other.
	</para>
      </listitem>

    </itemizedlist>

  </sect2>

  <sect2>
    <title>Changes</title>

    <itemizedlist>

      <listitem>
	<para>
	  <!--
	      commit cc33fe3fd10493f16a481c622bfab53458b57d06
	      Change the default value of search_primary_node_timeout from 10 to 300.

	      commit 7671794bad592814de545dabfd6a36fd699466da
	      change the Makefile under this directory src/sql/,that is proposed by[pgpool-hackers: 1611]

	      commit 883d761b406ea156e96751aacdbb19d843905eb2
	      Change the PID length of pcp_proc_count command result to 6 characters long

	      commit 9b62eca4042ae5443a9bbbcdaa612ae86c7d8c91
	      Redirect all user queries to primary server

	    -->
	</para>
      </listitem>

    </itemizedlist>

  </sect2>

  <sect2>
    <title>Bug fixes</title>

    <itemizedlist>

      <listitem>
	<para>
	<!--
	    commit a7e459fa31204323df83e4a3df3135bf7d4634cd
	    Fix the case when all backends are down then 1 node attached.
	    commit e89e365aca82316f32cb76a16b782bdcaf44bee3
	    Fix for: [pgpool-general: 4997] Avoiding downtime when pgpool changes require a restart
	    commit 233ae462a417fb2d5919a2eac900b17348a7ca8b
	    Fixing a problem with the watchdog failover_command locking mechanism
	    commit 352bba0c539910cbe349f18f5fd1447c9a09fc5a
	    Fix wrong printf format specification.
	    commit b412da255932ec7af3c9ec92bec61b037a32ac31
	    Disable strict aliasing optimization.
	    commit 9a2c2302b380ad688400e1f42db7d72590e999e8
	    Fixing an obvious logic mistake.
	    commit 650c660a89df7ca4f5247dbc61e6a65ea63fc78b
	    Do not use random() while generating MD5 salt.
	    commit 455df3d586a64ecf2063cba1a84c72bedd0af6d5
	    Don't ignore sync message from frontend when query cache is enabled.
	    commit 4c23c9b84bcaac627c2cd03d740ddb549b2012f2
	    Fix for 237: Pgpool-II fails to start if listen_addresses is empty string
	    commit 879d16a1e0bee51ab5c4b732bdfa8ac9a965c408
	    Create regression log directory if it does not exist yet.
	    commit fe5ccb939b967aa802ddeeb170c890b4f97ff926
	    Fixing the error messages when the socket operation fails
	    commit f2b5d17e23bbd77bab7a3c3db6a1ad23b613e17e
	    Fix regression failure of 003.failover.
	    commit 0b99687ed8eef87b2b732e0ec333354ca5a2c46a
	    Unbreak version 2 protocol case.
	    commit a7bc4c85d08e0ef36b290278d4c3809d5a44ba22
	    Fix hang when portal suspend received
	    commit 3b2db66c3a10444cb31d3f6285d6bf09994d167c
	    Fix for 228: pgpool doesn't de-escalate IP in case network restored
	    commit 9b122ab04c6e3f2fad41883dcdc991886499154e
	    SIGUSR1 signal handler should be installed before watchdog initialization.
	    commit bda946e718fe6f3605eb7e82ada8754bd84a279c
	    Fix for 218: Inconsistent status of Postgresql nodes in pgPool instances
	    commit 024eaeaa0fea3cd5acda4c41d791835887e11d02
	    Fix for 215: pgpool doesnt escalate ip in case of another node inavailability
	    commit 5bce300c491f44d44551f8812dc79d1166bf45ff
	    Fixing a coding mistake in watchdog code.
	    commit 541451eab2647151aa8c04a1e1a1fe9e42f2dd7e
	    Display human readable output for backend node status.
	    commit 3cbce4eaf870e89fdd8f8a2ad8fab8d3d8aadf65
	    Replace "MAJOR" macro to prevent occasional failure.
	    commit 866575c8fe89da2127a6c1bb19746b03b61bbfd4
	    Fix for  [pgpool-hackers: 1501]  kind does not match error
	    commit 680e3297f1d6c58810889ccf54a0614617739e7b
	    Fix handling of pcp_listen_addresses config parameter.
	    commit e245587de0dd967fefacb960976ab29a1ba0ac4f
	    Save and restore errno in each signal handler.
	    commit 0d1cdf96feb77de6f1dfc2d46ecd7467325d1f79
	    Fix usage of wait(2) in pgpool main process
	    commit bb41a1e55d59f842d8b97cdbb6c973c1989904aa
	    Fix confusing error messages.
	    commit a01624f498700026f75b445988fd18ab6d3a8fe9
	    Fix buffer over run problem in "show pool_nodes".
	    commit 4c63d102dc192b14215a83e0e86ac45cf78145c3
	    Fixing [pgpool-hackers: 1638] pgpool-II does not use default configuration
	    commit 226a21b19f6a59fe72599d84b4eed9185a0fa1f5
	    Fix bug with load balance node id info on shmem
	    commit 6ae42e74d48391b8cfaa97927e00bd65aec68fe8
	    fix for 0000197: pgpool hangs connections to database..
	    commit 294cf4aa4d5a3b9489d33b29d04a5ea9b8cf6d89
	    Fix a posible hang during health checking
	    commit a2d04ab99b8be678053106a4449c512c5bb74e04
	    Deal with the case when the primary is not node 0 in streaming replication mode.
	    commit 69d3faef778782ebf7c7a3f9914492825216f88a
	    If statement timeout is enabled on backend and do_query() sends a query to primary node, and all of following user queries are sent to
	    standby, it is possible that the next command, for example END, could
	    cause a statement timeout error on the primary, and a kind mismatch
	    error on pgpool-II is raised.
	    commit 0c0e727348f81b2d4fc273dceda6b64ed9463dbb
	    Fix extended protocol handling in raw mode
	    commit 78c5d56ba7d226370540205e030a8a35284bf4bd
	    Fix confusing comments in pgpool.conf
	    commit 27a38dc9b070607e0735feb461cd5c0a19f6493e
	    Fix Chinese documetation bug about raw mode
	    commit de905f672281e65ac2897475b3dc926ec28b7bfd
	    Fix documetation bug about raw mode
	    commit 95129999b0f04b4e1446e34f44a6ae99466885d6
	    Fix is_set_transaction_serializable() when SET default_transaction_isolation TO 'serializable'.
	    commit a5fdf78e6e86c5a8a1d4ce5b1eb273a59f5ecfb9
	    Fix extended protocol hang with empty query
	    commit 64696fd839da70e6fd8daacd73da11b6e8a1f1c9
	    Fix for [pgpool-general: 4569] PGPoolII-3.5 : segfault
	    commit f7723c89c7e925194f0da6154d9798a97b273026
	    Validating the PCP packet length
	    commit 39e07ea13a7f318f2c50a8aec7baa93e13a347d3
	    Fix extended query hangs
	    commit f305fbe0355529d4142d3b76e08f7d08dc2c3cf9
	    Fix pgpool hang bug (deal with bug 167)
	    commit d1c03f2efa25cc8d633d989d54a0cb1f074e448b
	    Fix pgpool_setup to not confuse log output
	    commit e55c230d674ea221c09e8266a68d119f1a3a2dac
	    Fix for [pgpool-general: 4519] Worker Processes Exit and Are Not Re-spawned
	    commit 67ac541d879b9a96353216b793ce954088e5ff06
	    Fix pgpool hung after receiving error state from backend
	    commit bb295a22ad47001758b0b38968f53c776f439f2f
	    Fix query stack problems in extended protocol case.
	    commit 63a0b7042b4b3d90336d8ed2c868861868178e71
	    Fix yet another reset query stuck problem
	    commit f1cfeb69a8557caf5d16dca5cdae0a3cad743e8c
	    Yet another reset query stuck problem fix. [pgpool-general: 4265]
	    commit c50f3579e92296ad57f71c4ab900f8521de1c7b1
	    Fixing pgpool-recovery module compilation issue with PostgreSQL 9.6
	    commit 48e9d4b028bdfefc9cca4e3f1f9d700b36cff294
	    Fix for [pgpool-II 0000166]: compile issue on freebsd
	    commit 6688332daa90d8578e64084d95339dfdbf5c6b30
	    Fix regression test to check timeout of each test
	    commit 44f43cc4799383a2049859bb47f89eb786549cd5
	    Add some warning messages for wd_authkey hash calculation failure
	  -->
	</para>
      </listitem>

    </itemizedlist>

  </sect2>

</sect1>
